{"helptext": ["pi FT_vent.nii                  \\", "                  -anat_follower_ROI FSWe epi FT_white.nii                   \\", "                  -anat_follower_erode FSvent FSWe                           \\", "                  -dsets FT_epi_r?+orig.HEAD                                 \\", "                  -tcat_remove_first_trs 2                                   \\", "                  -align_opts_aea -cost lpc+ZZ                               \\", "                  -tlrc_base MNI152_T1_2009c+tlrc                            \\", "                  -tlrc_NL_warp                                              \\", "                  -volreg_align_to MIN_OUTLIER                               \\", "                  -volreg_align_e2a                                          \\", "                  -volreg_tlrc_warp                                          \\", "                  -regress_motion_per_run                                    \\", "                  -regress_ROI_PC FSvent 3                                   \\", "                  -regress_make_corr_vols aeseg FSvent                       \\", "                  -regress_anaticor_fast                                     \\", "                  -regress_anaticor_label FSWe                               \\", "                  -regress_censor_motion 0.2                                 \\", "                  -regress_censor_outliers 0.1                               \\", "                  -regress_apply_mot_types demean deriv                      \\", "                  -regress_est_blur_epits                                    \\", "                  -regress_est_blur_errts", "", "       Example 11b. Similar to 11, but without FreeSurfer. ~2~", "", "         AFNI currently does not have a good program to extract ventricles.", "         But it can make a CSF mask that includes them.  So without FreeSurfer,", "         one could import a ventricle mask from the template (e.g. for TT space,", "         using TT_desai_dd_mpm+tlrc).  For example, assume Talairach space for", "         the analysis, create a ventricle mask as follows:", "", "                3dcalc -a ~/abin/TT_desai_dd_mpm+tlrc                       \\", "                       -expr 'amongst(a,152,170)' -prefix template_ventricle", "                3dresample -dxyz 2.5 2.5 2.5 -inset template_ventricle+tlrc \\", "                       -prefix template_ventricle_2.5mm", "", "         o Be explicit with 2.5mm, using '-volreg_warp_dxyz 2.5'.", "         o Use template TT_N27+tlrc, to be aligned with the desai atlas.", "         o No -anat_follower options, but use -mask_import to import the", "           template_ventricle_2.5mm dataset (and call it Tvent).", "         o Use -mask_intersect to intersect ventricle mask with the subject's", "           CSFe mask, making a more reliable subject ventricle mask (Svent).", "         o Ventricle principle components are created as per-run regressors.", "         o Make WMe and Svent correlation volumes, which are just for", "           entertainment purposes anyway.", "         o Run the cluster simulation.", "", "                afni_proc.py -subj_id FT.11b.rest                            \\", "                  -blocks despike tshift align tlrc volreg blur mask regress \\", "                  -copy_anat FT_anat+orig                                    \\", "                  -dsets FT_epi_r?+orig.HEAD                                 \\", "                  -tcat_remove_first_trs 2                                   \\", "                  -align_opts_aea -cost lpc+ZZ                               \\", "                  -tlrc_base TT_N27+tlrc                                     \\", "                  -tlrc_NL_warp                                              \\", "                  -volreg_align_to MIN_OUTLIER                               \\", "                  -volreg_align_e2a                                          \\", "                  -volreg_tlrc_warp                                          \\", "                  -volreg_warp_dxyz 2.5                                      \\", "                  -mask_segment_anat yes                                     \\", "                  -mask_segment_erode yes                                    \\", "                  -mask_import Tvent template_ventricle_2.5mm+tlrc           \\", "                  -mask_intersect Svent CSFe Tvent                           \\", "                  -regress_motion_per_run                                    \\", "                  -regress_ROI_PC Svent 3                                    \\", "                  -regress_ROI_PC_per_run Svent                              \\", "                  -regress_make_corr_vols WMe Svent                          \\", "                  -regress_anaticor_fast                                     \\", "                  -regress_censor_motion 0.2                                 \\", "                  -regress_censor_outliers 0.1                               \\", "                  -regress_apply_mot_types demean deriv                      \\", "                  -regress_est_blur_epits                                    \\", "                  -regress_est_blur_errts                                    \\", "                  -regress_run_clustsim yes", "", "       Example 12 background: Multi-echo data processing. ~2~", "", "         Processing multi-echo data should be similar to single echo data,", "         except for perhaps:", "", "            combine         : the addition of a 'combine' block", "            -dsets_me_echo  : specify ME data, per echo", "            -dsets_me_run   : specify ME data, per run (alternative to _echo)", "            -echo_times     : specify echo times (if needed)", "            -combine_method : specify method to combine echoes (if any)", "", "         An afni_proc.py command might be updated to include something like:", "", "            afni_proc.py ...                                     \\", "                -blocks tshift align tlrc volreg mask combine    \\", "                        blur scale regress                       \\", "                -dsets_me_echo epi_run*_echo_01.nii              \\", "                -dsets_me_echo epi_run*_echo_02.nii              \\", "                -dsets_me_echo epi_run*_echo_03.nii              \\", "                -echo_times 15 30.5 41                           \\", "                ...                                              \\", "                -mask_epi_anat yes                               \\", "                -combine_method OC                               \\", "                ...                                              \\", "", "", "       Example 12a. Multi-echo data processing - very simple. ~2~", "", "         Keep it simple and just focus on the basic ME options, plus a few", "         for controlling registration.", "", "         o This example uses 3 echoes of data across just 1 run.", "            - so use a single -dsets_me_run option to input EPI datasets", "         o Echo 2 is used to drive registration for all echoes.", "            - That is the default, but it is good to be explicit.", "         o The echo times are not needed, as the echoes are never combined.", "         o The echo are never combined (in this example), so that there", "           are always 3 echoes, even until the end.", "            - Note that the 'regress' block is not valid for multiple echoes.", "", "                afni_proc.py -subj_id FT.12a.ME                 \\", "                  "], "params": [{"param_range": [1000, 1023], "help_range": [982, 1376]}, {"param_range": [1395, 1419], "help_range": [1377, 2095]}, {"param_range": [2119, 2121], "help_range": [2096, 3205]}, {"param_range": [3224, 3230], "help_range": [192, 349]}, {"param_range": [3382, 3397], "help_range": [3364, 3916]}, {"param_range": [3935, 3953], "help_range": [-5038, -4960]}, {"param_range": [4014, 4033], "help_range": [3996, 4311]}, {"param_range": [4330, 4342], "help_range": [4312, 4390]}, {"param_range": [4409, 4421], "help_range": [4391, 4469]}, {"param_range": [4488, 4511], "help_range": [4470, 4785]}, {"param_range": [4804, 4828], "help_range": [4786, 5022]}, {"param_range": [5041, 5062], "help_range": [5023, 5299]}, {"param_range": [5312, 5326], "help_range": [5330, 5355]}, {"param_range": [5368, 5381], "help_range": [5386, 5433]}, {"param_range": [5446, 5457], "help_range": [5464, 5494]}, {"param_range": [5507, 5522], "help_range": [5525, 5846]}, {"param_range": [5863, 5869], "help_range": [5847, 5913]}, {"param_range": [5930, 5936], "help_range": [5914, 5980]}, {"param_range": [5997, 6003], "help_range": [5981, 6047]}, {"param_range": [6064, 6066], "help_range": [6048, 6181]}], "previous": "afni_proc.py_part7.json", "next": "afni_proc.py_part9.json"}