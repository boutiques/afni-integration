{"helptext": ["n", "     http://en.wikipedia.org/wiki/Joint_entropy", "     http://www.cs.jhu.edu/~cis/cista/746/papers/mutual_info_survey.pdf", "", " * For more information about the 'hel' functional, see", "     http://en.wikipedia.org/wiki/Hellinger_distance", "", " * Some cost functionals (e.g., 'mi', 'cr', 'hel') are", "   computed by creating a 2D joint histogram of the", "   base and source image pair.  Various options above", "   (e.g., '-histbin', etc.) can be used to control the", "   number of bins used in the histogram on each axis.", "   (If you care to control the program in such detail!)", "", " * Minimization of the chosen cost functional is done via", "   the NEWUOA software, described in detail in", "     MJD Powell. 'The NEWUOA software for unconstrained", "       optimization without derivatives.' In: GD Pillo,", "       M Roma (Eds), Large-Scale Nonlinear Optimization.", "       Springer, 2006.", "     http://www.damtp.cam.ac.uk/user/na/NA_papers/NA2004_08.pdf", "", "===========================================================================", "", " -nwarp type = Experimental nonlinear warping:", "", "              ***** Note that these '-nwarp' options are superseded  *****", "              ***** by the AFNI program 3dQwarp,  which does a more  *****", "              ***** accurate and better and job of nonlinear warping *****", "              ***** ------ Zhark the Warper ------ July 2013 ------- *****", "", "              * At present, the only 'type' is 'bilinear',", "                as in 3dWarpDrive, with 39 parameters.", "              * I plan to implement more complicated nonlinear", "                warps in the future, someday ....", "              * -nwarp can only be applied to a source dataset", "                that has a single sub-brick!", "              * -1Dparam_save and -1Dparam_apply work with", "                bilinear warps; see the Notes for more information.", "        ==>>*** Nov 2010: I have now added the following polynomial", "                warps: 'cubic', 'quintic', 'heptic', 'nonic' (using", "                3rd, 5th, 7th, and 9th order Legendre polynomials); e.g.,", "                   -nwarp heptic", "              * These are the nonlinear warps that I now am supporting.", "              * Or you can call them 'poly3', 'poly5', 'poly7', and 'poly9',", "                  for simplicity and non-Hellenistic clarity.", "              * These names are not case sensitive: 'nonic' == 'Nonic', etc.", "              * Higher and higher order polynomials will take longer and longer", "                to run!", "              * If you wish to apply a nonlinear warp, you have to supply", "                a parameter file with -1Dparam_apply and also specify the", "                warp type with -nwarp.  The number of parameters in the", "                file (per line) must match the warp type:", "                   bilinear =  43   [for all nonlinear warps, the final]", "                   cubic    =  64   [4 'parameters' are fixed values to]", "                   quintic  = 172   [normalize the coordinates to -1..1]", "                   heptic   = 364   [for the nonlinear warp functions. ]", "                   nonic    = 664", "                In all these cases, the first 12 parameters are the", "                affine parameters (shifts, rotations, etc.), and the", "                remaining parameters define the nonlinear part of the warp", "                (polynomial coefficients); thus, the number of nonlinear", "                parameters over which the optimization takes place is", "                the number in the table above minus 16.", "               * The actual polynomial functions used are products of", "                 Legendre polynomials, but the symbolic names used in", "                 the header line in the '-1Dparam_save' output just", "                 express the polynomial degree involved; for example,", "                      quint:x^2*z^3:z", "                 is the name given to the polynomial warp basis function", "                 whose highest power of x is 2, is independent of y, and", "                 whose highest power of z is 3; the 'quint' indicates that", "                 this was used in '-nwarp quintic'; the final ':z' signifies", "                 that this function was for deformations in the (DICOM)", "                 z-direction (+z == Superior).", "        ==>>*** You can further control the form of the polynomial warps", "                (but not the bilinear warp!) by restricting their degrees", "                of freedom in 2 different ways.", "                ++ You can remove the freedom to have the nonlinear", "                   deformation move along the DICOM x, y, and/or z axes.", "                ++ You can remove the dependence of the nonlinear", "                   deformation on the DICOM x, y, and/or z coordinates.", "                ++ To illustrate with the six second order polynomials:", "                      p2_xx(x,y,z) = x*x  p2_xy(x,y,z) = x*y", "                      p2_xz(x,y,z) = x*z  p2_yy(x,y,z) = y*y", "                      p2_yz(x,y,z) = y*z  p2_zz(x,y,z) = z*z", "                   Unrestricted, there are 18 parameters associated with", "                   these polynomials, one for each direction of motion (x,y,z)", "                   * If you remove the freedom of the nonlinear warp to move", "                     data in the z-direction (say), then there would be 12", "                     parameters left.", "                   * If you instead remove the freedom of the nonlinear warp", "                     to depend on the z-coordinate, you would be left with", "                     3 basis functions (p2_xz, p2_yz, and p2_zz would be", "                     eliminated), each of which would have x-motion, y-motion,", "                     and z-motion parameters, so there would be 9 parameters.", "                ++ To fix motion along the x-direction, use the option", "                   '-nwarp_fixmotX' (and '-nwarp_fixmotY' and '-nwarp_fixmotZ).", "                ++ To fix dependence of the polynomial warp on the x-coordinate,", "                   use the option '-nwarp_fixdepX' (et cetera).", "                ++ These coordinate labels in the options (X Y Z) refer to the", "                   DICOM directions (X=R-L, Y=A-P, Z=I-S).  If you would rather", "                   fix things along the dataset storage axes, you can use", "                   the symbols I J K to indicate the fastest to slowest varying", "                   array dimensions (e.g., '-nwarp_fixdepK').", "                   * Mixing up the X Y Z and I J K forms of parameter freezing", "                     (e.g., '-nwarp_fixmotX -nwarp_fixmotJ') may cause trouble!", "                ++ If you input a 2D dataset (a single slice) to be registered", "                   with '-nwarp', the program automatically assumes '-nwarp_fixmotK'", "                   and '-nwarp_fixdepK' so there are no out-of-plane parameters", "                   or dependence.  The number of nonlinear parameters is then:", "                     2D: cubic = 14 ; quintic =  36 ; heptic =  66 ; nonic = 104.", "                     3D: cubic = 48 ; quintic = 156 ; heptic = 348 ; nonic = 648.", "                     [ n-th order: 2D = (n+4)*(n-1) ; 3D = (n*n+7*n+18)*(n-1)/2 ]", "                ++ Note that these '-nwarp_fix' options have no effect on the", "                   affine part of the warp -- if you want to constrain that as", "                   well, you'll have to use the '-parfix' option.", "                   * However, for 2D images, the affine part will automatically", "                     be restricted to in-plane (6 parameter) 'motions'.", "                ++ If you save the warp parameters (with '-1Dparam_save') when", "                   doing 2D registration, all the parameters will be saved, even", "                   the large number of them that are fixed to zero. You can use", "                   '1dcat -nonfixed' to remove these columns from the 1D file if", "                   you want to further process the varying parameters (e.g., 1dsvd).", "              **++ The mapping from I J K to X Y Z (DICOM coordinates), where the", "                   '-nwarp_fix' constraints are actually applied, is very simple:", "                   given the command to fix K (say), the coordinate X, or Y, or Z", "                   whose direction most closely aligns with the dataset K grid", "                   direction is chosen.  Thus, for coronal images, K is in the A-P", "                   direction, so '-nwarp_fixmotK' is translated to '-nwarp_fixmotY'.", "                   * This simplicity means that using the '-nwarp_fix' commands on", "                     oblique datasets is problematic.  Perhaps it would work in", "                     combination with the '-EPI' option, but that has not been tested.", "", "-nwarp NOTES:", "-------------", "* -nwarp is slow - reeeaaallll slow - use it with OpenMP!", "* Check the results to make sure the optimizer didn't run amok!", "   (You should ALWAYS do this with any registration software.)", "* For the nonlinear warps, the largest coefficient allowed is", "   set to 0.10 by default.  If you wish to change this, use an", "   option like '-nwarp_parmax 0.05' (to make the allowable amount", "   of nonlinear deformation half the default).", "  ++ N.B.: Increasing the maximum past 0.10 may give very bad results!!", "* If you use -1Dparam_save, then you can apply the nonlinear", "   warp to another dataset using -1Dparam_apply in a later", "   3dAllineate run. To do so, use '-nwarp xxx' in both runs", "   , so that the program knows what the extra parameters in", "   the file are to be used for.", "  ++ Bilinear: 43 values are saved in 1 row of the param file.", "  ++ The first 12 are the affine parameters", "  ++ The next 27 are the D1,D2,D3 matrix parameters (cf. infra).", "  ++ The final 'extra' 4 values are used to specify", "      the center of coordinates (vector Xc below), and a", "      pre-computed scaling factor applied to parameters #13..39.", "  ++ For polynomial warps, a similar format is used (mutatis mutandis).", "* The option '-nwarp_save sss' lets you save a 3D dataset of the", "  the displacement field used to create the output dataset.  This", "  dataset can be used in program 3dNwarpApply to warp other datasets.", "  ++ If the warp is symbolized by x -> w(x) [here, x is a DICOM 3-vector],", "     then the '-nwarp_save' dataset contains w(x)-x; that is, it contains", "     the warp displacement of each grid point from its grid location.", "  ++ Also see program 3dNwarpCalc for other things you can do with this file:", "       warp inversion, catenation, square root, ...", "", "* Bilinear warp formula:", "   Xout = inv[ I + {D1 (Xin-Xc) | D2 (Xin-Xc) | D3 (Xin-Xc)} ] [ A Xin ]", "  where Xin  = input vector  (base dataset coordinates)", "        Xout = output vector (source dataset coordinates)", "        Xc   = center of coordinates used for nonlinearity", "               (will be the center of the base dataset volume)", "        A    = matrix representing affine transformation (12 params)", "        I    = 3x3 identity matrix", "    D1,D2,D3 = three 3x3 matrices (the 27 'new' parameters)", "               * when all 27 parameters == 0, warp is purely affine", "     {P|Q|R} = 3x3 matrix formed by adjoining the 3-vectors P,Q,R", "    inv[...] = inverse 3x3 matrix of stuff inside '[...]'", "* The inverse of a bilinear transformation is another bilinear", "   transformation.  Someday, I may write a program that will let", "   you compute that inverse transformation, so you can use it for", "   some cunning and devious purpose.", "* If you expand the inv[...] part of the above formula in a 1st", "   order Taylor series, you'll see that a bilinear warp is basically", "   a quadratic warp, with the additional feature that its inverse", "   is directly computable (unlike a pure quadratic warp).", "* 'bilinearD' means the matrices D1, D2, and D3 with be constrained", "  to be diagonal (a total of 9 nonzero values), rather than full", "  (a total of 27 nonzero values).  This option is much faster.", "* Is '-nwarp bilinear' useful?  Try it and tell me!", "* Unlike a bilinear warp, the polynomial warps cannot be exactly", "  inverted.  At some point, I'll write a program to compute an", "  approximate inverse, if there is enough clamor for such a toy.", "", "===========================================================================", "", " =========================================================================", "* This binary version of 3dAllineate is compiled using OpenMP, a semi-", "   automatic parallelizer software toolkit, which splits the work across", "   multiple CPUs/cores on the same shared memory computer.", "* OpenMP is NOT like MPI -- it does not work with CPUs connected only", "   by a network (e.g., OpenMP doesn't work with 'cluster' setups).", "* For implementation and compilation details, please see", "   https://afni.nimh.nih.gov/pub/dist/doc/misc/OpenMP.html", "* The number of CPU threads used will default to the maximum number on", "   your system. You can control this value by setting environment variable", "   OMP_NUM_THREADS to some smaller value (including 1).", "* Un-setting OMP_NUM_THREADS resets OpenMP back to its default state of", "   using all CPUs available.", "   ++ However, on some systems, it seems to be necessary to set variable", "      OMP_NUM_THREADS explicitly, or you only get one CPU.", "   ++ On other systems with many CPUS, you probably want to limit the CPU", "      count, since using more than (say) 16 threads is probably useless.", "* You must set OMP_NUM_THREADS in the shell BEFORE running the program,", "   since OpenMP queries this variable BEFORE the program actually starts.", "   ++ You can't usefully set this variable in your ~/.afnirc file or on the", "      command line with the '-D' option.", "* How many threads are useful? That varies with the program, and how well", "   it was coded. You'll have to experiment on your own systems!", "* The number of CPUs on this particular computer system is ...... 2.", "* The maximum number of CPUs that will be used is now set to .... 2.", "* OpenMP may or may not speed up the program significantly.  Limited", "   tests show that it provides some benefit, particularly when using", "   the more complicated interpolation methods (e.g., '-cubic' and/or", "   '-final wsinc5'), for up to 3-4 CPU threads.", "* But the speedup is definitely not linear in the number of threads, alas.", "   Probably because my parallelization efforts were pretty limited.", " =========================================================================", "", "++ Compile date = May 25 2018 {AFNI_18.1.18:macosx_10.7_Intel_64}"], "params": [{"param_range": [1000, 1006], "help_range": [1014, 14222]}], "previous": "3dAllineate_part9.json"}