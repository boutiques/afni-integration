{
 "helptext": [
  "Usage: 3dPolyfit [options] dataset",
  "Fits a polynomial in space to the dataset and outputs that.",
  "",
  "Options:",
  "  -nord n    = Maximum polynomial order (0..9) [default order=3]",
  "  -blur f    = Gaussian blur (inside mask) with FWHM='f' (mm)",
  "  -mrad r    = Radius (voxels) of preliminary median filter",
  "                [default is no blurring of either type; you can]",
  "                [do both types (Gaussian and median), but why??]",
  "                [N.B.: median blur is much slower than Gaussian]",
  "  -prefix pp = Use 'pp' for prefix of output dataset (the fit).",
  "  -resid  rr = Use 'rr' for the prefix of the residual dataset.",
  "  -automask  = Create a mask (a la 3dAutomask)",
  "  -mask mset = Create a mask from nonzero voxels in 'mset'.",
  "  -mone      = Scale the mean value of the fit (inside the mask) to 1.",
  "  -mclip     = Clip values outside the box containing the mask",
  "               to the edge of the box, to avoid weird artifacts.",
  "  -meth mm   = Set 'mm' to 2 for least squares fit;",
  "               set it to 1 for L1 fit [default method=2]",
  "                [Note that L1 fitting is much slower than L2 fitting!]",
  "  -base bb   = In addition to the polynomial fit, also use",
  "               the volumes in dataset 'bb' as extra basis functions.",
  "                [If you use a base dataset, then you can set]",
  "                [nord to -1, to skip using a polynomial fit.]",
  "  -verb      = Print fun and useful progress reports :-)",
  "",
  "* Output dataset is always stored in float format.",
  "* If the input dataset has more than 1 sub-brick, only sub-brick #0",
  "  is processed.",
  "* If the -base dataset has multiple sub-bricks, all of them are used.",
  "",
  "-- Dec 2010 - RWCox - beats workin' for a living",
  "",
  "++ Compile date = May 25 2018 {AFNI_18.1.18:macosx_10.7_Intel_64}",
  ""
 ],
 "params": [
  {
   "param_range": [
    107,
    112
   ],
   "help_range": [
    120,
    169
   ]
  },
  {
   "param_range": [
    172,
    177
   ],
   "help_range": [
    185,
    231
   ]
  },
  {
   "param_range": [
    234,
    239
   ],
   "help_range": [
    247,
    486
   ]
  },
  {
   "param_range": [
    489,
    496
   ],
   "help_range": [
    502,
    550
   ]
  },
  {
   "param_range": [
    553,
    559
   ],
   "help_range": [
    566,
    614
   ]
  },
  {
   "param_range": [
    617,
    626
   ],
   "help_range": [
    630,
    661
   ]
  },
  {
   "param_range": [
    664,
    669
   ],
   "help_range": [
    677,
    721
   ]
  },
  {
   "param_range": [
    724,
    729
   ],
   "help_range": [
    737,
    792
   ]
  },
  {
   "param_range": [
    795,
    801
   ],
   "help_range": [
    808,
    920
   ]
  },
  {
   "param_range": [
    923,
    928
   ],
   "help_range": [
    936,
    1100
   ]
  },
  {
   "param_range": [
    1103,
    1108
   ],
   "help_range": [
    1116,
    1352
   ]
  },
  {
   "param_range": [
    1355,
    1360
   ],
   "help_range": [
    1368,
    1732
   ]
  }
 ]
}