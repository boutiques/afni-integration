{"helptext": ["e 'regress' block.", "", "    Those analyzing resting-state data might prefer the per-run method, as it", "    would remove more variance and degrees of freedom might not be as valuable.", "", "    Those analyzing a normal signal model might prefer doing it across-runs,", "    giving up only 13 degrees of freedom, and helping not to over-model the", "    data.", "", "    ** The minimum options would be specifying the 'ricor' block (preferably", "       after despike), along with -ricor_regs and -ricor_regress_method.", "", "    Example R3: afni_proc.py option usage:", "", "        Provide additional options to afni_proc.py to apply the despike and", "        ricor blocks (which will be the first 2 blocks by default), with each", "        regressor named 'slibase*.1D' going across all runs, and where the", "        first 3 TRs are removed from each run (matching -tcat_remove_first_trs,", "        most likely).", "", "            -do_block despike ricor", "            -ricor_regs slibase*.1D", "            -ricor_regress_method across-runs", "            -ricor_regs_nfirst 3", "", "    --------------------------------------------------", "    RUNS OF DIFFERENT LENGTHS NOTE: ~2~", "", "    In the case that the EPI datasets are not all of the same length, here", "    are some issues that may come up, listed by relevant option:", "", "        -volreg_align_to        OK, as of version 1.49.", "", "        -ricor_regress_method   OK, as of version 3.05.", "", "        -regress_polort         Probably no big deal.", "                                If this option is not used, then the degree of", "                                polynomial used for the baseline will come from", "                                the first run.  Only 1 polort may be applied.", "", "        -regress_est_blur_epits OK, as of version 1.49.", "", "     *  -regress_use_stim_files This may fail, as make_stim_times.py is not", "                                currently prepared to handle runs of different", "                                lengths.", "", "        -regress_censor_motion  OK, as of version 2.14", "", "     * probably will be fixed (please let me know of interest)", "", "    --------------------------------------------------", "    SCRIPT EXECUTION NOTE: ~2~", "", "    The suggested way to run the output processing SCRIPT is via...", "", "        a) if you use tcsh:    tcsh -xef SCRIPT |& tee output.SCRIPT", "", "        b) if you use bash:    tcsh -xef SCRIPT 2>&1 | tee output.SCRIPT", "", "        c) if you use tcsh and the script is executable, maybe use one of:", "", "                            ./SCRIPT |& tee output.SCRIPT", "                            ./SCRIPT 2>&1 | tee output.SCRIPT", "", "    Consider usage 'a' for example:  tcsh -xef SCRIPT |& tee output.SCRIPT", "", "    That command means to invoke a new tcsh with the -xef options (so that", "    commands echo to the screen before they are executed, exit the script", "    upon any error, do not process the ~/.cshrc file) and have it process the", "    SCRIPT file, piping all output to the 'tee' program, which will duplicate", "    output back to the screen, as well as to the given output file.", "", "    parsing the command: tcsh -xef SCRIPT |& tee output.SCRIPT", "", "        a. tcsh", "", "           The script itself is written in tcsh syntax and must be run that way.", "           It does not mean the user must use tcsh.  Note uses 'a' and 'b'.", "           There tcsh is specified by the user.  The usage in 'c' applies tcsh", "           implicitly, because the SCRIPT itself specifies tcsh at the top.", "", "        b. tcsh -xef", "", "           The -xef options are applied to tcsh and have the following effects:", "", "                x : echo commands to screen before executing them", "                e : exit (terminate) the processing on any errors", "                f : do not process user's ~/.cshrc file", "", "           The -x option is very useful so one see not just output from the", "           programs, but the actual commands that produce the output.  It", "           makes following the output much easier.", "", "           The -e option tells the shell to terminate on any error.  This is", "           useful for multiple reasons.  First, it allows the user to easily", "           see the failing command and error message.  Second, it would be", "           confusing and useless to have the script try to continue, without", "           all of the needed data.", "", "           The -f option tells the shell not to process the user's ~/.cshrc", "           (or ~/.tcshrc) file.  The main reason for including this is because", "           of the -x option.  If there were any errors in the user's ~/.cshrc", "           file and -x option were used, they would terminate the shell before", "           the script even started, probably leaving the user confused.", "", "        c. tcsh -xef SCRIPT", "", "           The T-shell is invoked as described above, executing the contents", "           of the specified text file (called 'SCRIPT', for example) as if the", "           user had typed the included commands in their terminal window.", "", "        d. |&", "", "           These symbols are for piping the output of one program to the input", "           of another.  Many people know how to do 'afni_proc.py -help | less'", "           (or maybe '| more').  This script will output a lot of text, and we", "           want to get a copy of that into a text file (see below).", "", "           Piping with '|' captures only stdout (standard output), and would", "           not capture errors and warnings that appear.  Piping with '|&'", "           captures both stdout and stderr (standard error).  The user may not", "           be able to tell any difference between those file streams on the", "           screen, but since programs write to both, we want to capture both.", "", "        e. tee output.SCRIPT", "", "           Where do we want to send this captured stdout and stderr text?  Send", "           it to the 'tee' program.  Like a plumber's tee, the 'tee' program", "           splits the data (not water) stream off into 2 directions.", "", "           Here, one direction that tee sends the output is back to the screen,", "           so the user can still see what is happening.", "", "           The other direction is to the user-specified text file.  In this", "           example it would be 'output.SCRIPT'.  With this use of 'tee', all", "           screen output will be duplicated in that text file.", "", "", "", "    ==================================================", "    OPTIONS:  ~2~", "", "        Informational options, general options, and block options.", "        Block options are ordered by block.", "", "        -----------------------------------------------------------------", "        Informational/terminal options  ~3~", "", "        -help                   : show this help", "        -hist                   : show the module history", "", "        -requires_afni_version  : show AFNI date required by processing script", "", "            Many updates to afni_proc.py are accompanied by corresponding", "            updates to other AFNI programs.  So if the processing script is", "            created on one computer but executed on another (with an older", "            version of AFNI), confusing failures could result.", "", "            The required date is adjusted whenever updates are made that rely", "            on new features of some other program.  If the processing script", "            checks the AFNI version, the AFNI package must be as current as the", "            date output via this option.  Checks are controlled by the option", "            '-check_afni_version'.", "", "            The checking method compares the output of:", "                afni_proc.py -requires_afni_version", "", "            against the most recent date in afni_history:", "                afni_history -past_entries 1", "", "            See also '-requires_afni_hist'.", "", "            See also '-check_afni_version'.", "", "        -requires_afni_hist     : show history of -requires_afni_version", "", "            List the history of '-requires_afni_version' dates and reasons.", "", "        -show_valid_opts        : show all valid options (brief format)", "        -ver                    : show the version number", "", "        -----------------------------------------------------------------", "        General execution and setup options ~3~", "", "        -anat_follower LABEL GRID DSET : specify anat follower dataset", "", "                e.g. -anat_follower GM anat FS_GM_MASK.nii", "", "            Use this option to pass any anatomical follower dataset.  Such a", "            dataset is warped by any transformations that take the original", "            anat to anat_final.", "", "            Anatomical follower datasets are resampled using wsinc5.  The only", "            difference with -anat_follower_ROI is that such ROI datasets are", "            resampled using nearest neighbor interpolation.", "", "               LABEL    : to name and refer to this dataset", "               GRID     : which grid should this be sampled on, anat or epi?", "               DSET     : name of input dataset, changed to copy_af_LABEL", "", "            A default anatomical follower (in the case of skull stripping) is", "            the original anat.  That is to get a warped version that still has", "            a skull, for quality control.", "", "            See also -anat_follower_ROI, anat_follower_erode.", "", "        -anat_follower_erode LABEL LABEL ...: erode masks for given labels", "", "                e.g. -anat_follower_erode WMe", "", "            Perform a single erosion step on the mask dataset for the given", "            label.  This is done on the input ROI (anatomical?) grid.", "", "            The erosion step is applied before any transformation, and uses the", "            18-neighbor approach (6 face and 12 edge neighbors, not 8 corner", "            neighbors) in 3dmask_tool.", "", "            See also -regress_ROI_PC, -regress_ROI.", "            Please see '3dmask_tool -help' for more information on eroding.", "", "        -anat_follower_ROI LABEL GRID DSET : specify anat follower ROI dataset", "", "                e.g. -anat_follower_ROI aaseg anat aparc.a2009s+aseg.nii", "                e.g. -anat_follower_ROI FSvent epi FreeSurfer_ventricles.nii", "", "            Use this option to pass any anatomical follower dataset.  Such a", "            dataset is warped by any transformations that take the original", "            anat to anat_final.", "", "            Similar to -anat_follower, except that these anatomical follower", "            datasets are resampled using nearest neighbor (NN) interpolation,", "            to preserve data values (as opposed to -anat_follower, which uses", "            wsinc5).  That is the only difference between these options.", "", "               LABEL    : to name and refer to this dataset", "               GRID     : which grid should this be sampled on, anat or epi?", "               DSET     : name of input dataset, changed to copy_af_LABEL", "", "            Labels defined via this option may be used in -regress_ROI or _PC.", "", "            See also -anat_follower, anat_follower_erode, -regress_ROI", "            or -regress_ROI_PC.", "", "        -anat_has_skull yes/no  : specify whether the anatomy has a skull", "", "                e.g. -anat_has_skull no", "", "            Use this option to block any skull-stripping operations, likely", "            either in the align or tlrc processing blocks.", "", "        -anat_uniform_method METHOD : specify uniformity correction method", "", "                e.g. -anat_uniform_method unifize", "", "            Specify the method for anatomical intensity uniformity correction.", "", "                none    : do not do uniformity correction at all", "                default : use 3dUnifize at whim of auto_warp.py", "                unifize : apply 3dUnifize early in processing stream", "                          (so it affects more than auto_warp.py)", "", "            Please see '3dUnifize -help' for details.", "            See also -anat_opts_unif.", "", "        -anat_opts_unif OPTS ... : specify extra options for unifize command", "", "                e.g. -anat_opts_unif -Urad 14", "", "            Specify options to be applied to the command used for anatomical", "            intensity uniformity correction, such as 3dUnifize.", "", "            Please see '3dUnifize -help' for details.", "            See also -anat_uniform_method.", "", "        -anat_unif_GM yes/no    : also unifize gray matter (lower intensities)"], "params": [{"param_range": [1000, 1011], "help_range": [988, 6483]}, {"param_range": [6493, 6498], "help_range": [6519, 6533]}, {"param_range": [6542, 6547], "help_range": [6568, 6591]}, {"param_range": [6601, 6623], "help_range": [6627, 7612]}, {"param_range": [7622, 7641], "help_range": [7648, 7763]}, {"param_range": [7773, 7789], "help_range": [7799, 7836]}, {"param_range": [7845, 7849], "help_range": [7871, 8017]}, {"param_range": [8027, 8041], "help_range": [8060, 9027]}, {"param_range": [9037, 9057], "help_range": [9029, 9623]}, {"param_range": [9633, 9651], "help_range": [9670, 10743]}, {"param_range": [10753, 10768], "help_range": [10745, 10995]}], "previous": "afni_proc.py_part14.json", "next": "afni_proc.py_part16.json"}