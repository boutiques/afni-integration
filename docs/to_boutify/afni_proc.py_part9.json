{"helptext": ["o data,", "         except for perhaps:", "", "            combine         : the addition of a 'combine' block", "            -dsets_me_echo  : specify ME data, per echo", "            -dsets_me_run   : specify ME data, per run (alternative to _echo)", "            -echo_times     : specify echo times (if needed)", "            -combine_method : specify method to combine echoes (if any)", "", "         An afni_proc.py command might be updated to include something like:", "", "            afni_proc.py ...                                     \\", "                -blocks tshift align tlrc volreg mask combine    \\", "                        blur scale regress                       \\", "                -dsets_me_echo epi_run*_echo_01.nii              \\", "                -dsets_me_echo epi_run*_echo_02.nii              \\", "                -dsets_me_echo epi_run*_echo_03.nii              \\", "                -echo_times 15 30.5 41                           \\", "                ...                                              \\", "                -mask_epi_anat yes                               \\", "                -combine_method OC                               \\", "                ...                                              \\", "", "", "       Example 12a. Multi-echo data processing - very simple. ~2~", "", "         Keep it simple and just focus on the basic ME options, plus a few", "         for controlling registration.", "", "         o This example uses 3 echoes of data across just 1 run.", "            - so use a single -dsets_me_run option to input EPI datasets", "         o Echo 2 is used to drive registration for all echoes.", "            - That is the default, but it is good to be explicit.", "         o The echo times are not needed, as the echoes are never combined.", "         o The echo are never combined (in this example), so that there", "           are always 3 echoes, even until the end.", "            - Note that the 'regress' block is not valid for multiple echoes.", "", "                afni_proc.py -subj_id FT.12a.ME                 \\", "                  -blocks tshift align tlrc volreg mask blur    \\", "                  -copy_anat FT_anat+orig                       \\", "                  -dsets_me_run epi_run1_echo*.nii              \\", "                  -reg_echo 2                                   \\", "                  -tcat_remove_first_trs 2                      \\", "                  -volreg_align_to MIN_OUTLIER                  \\", "                  -volreg_align_e2a                             \\", "                  -volreg_tlrc_warp", "", "       Example 12b. Multi-echo data processing - OC resting state. ~2~", "", "         Still keep this simple, mostly focusing on ME options, plus standard", "         ones for resting state.", "", "         o This example uses 3 echoes of data across just 1 run.", "            - so use a single -dsets_me_run option to input EPI datasets", "         o Echo 2 is used to drive registration for all echoes.", "            - That is the default, but it is good to be explicit.", "         o The echoes are combined via the 'combine' block.", "         o So -echo_times is used to provided them.", "", "                afni_proc.py -subj_id FT.12a.ME                 \\", "                  -blocks tshift align tlrc volreg mask combine \\", "                          blur scale regress                    \\", "                  -copy_anat FT_anat+orig                       \\", "                  -dsets_me_run epi_run1_echo*.nii              \\", "                  -echo_times 15 30.5 41                        \\", "                  -reg_echo 2                                   \\", "                  -tcat_remove_first_trs 2                      \\", "                  -align_opts_aea -cost lpc+ZZ                  \\", "                  -tlrc_base MNI152_T1_2009c+tlrc               \\", "                  -tlrc_NL_warp                                 \\", "                  -volreg_align_to MIN_OUTLIER                  \\", "                  -volreg_align_e2a                             \\", "                  -volreg_tlrc_warp                             \\", "                  -mask_epi_anat yes                            \\", "                  -combine_method OC                            \\", "                  -regress_motion_per_run                       \\", "                  -regress_censor_motion 0.2                    \\", "                  -regress_censor_outliers 0.1                  \\", "                  -regress_apply_mot_types demean deriv         \\", "                  -regress_est_blur_epits", "", "       Example 12c. Multi-echo data processing - ME-ICA resting state. ~2~", "", "         As above, but run tedana.py for MEICA denoising.", "", "         o Since tedana.py will mask the data, it may be preferable to", "           blur only within that mask (-blur_in_mask yes).", "         o A task analysis using tedana might look much the same,", "           but with the extra -regress options for the tasks.", "", "                afni_proc.py -subj_id FT.12a.ME                 \\", "                  -blocks tshift align tlrc volreg mask combine \\", "                          blur scale regress                    \\", "                  -copy_anat FT_anat+orig                       \\", "                  -dsets_me_run epi_run1_echo*.nii              \\", "                  -echo_times 15 30.5 41                        \\", "                  -reg_echo 2                                   \\", "                  -tcat_remove_first_trs 2                      \\", "                  -align_opts_aea -cost lpc+ZZ                  \\", "                  -tlrc_base MNI152_T1_2009c+tlrc               \\", "                  -tlrc_NL_warp                                 \\", "                  -volreg_align_to MIN_OUTLIER                  \\", "                  -volreg_align_e2a                             \\", "                  -volreg_tlrc_warp                             \\", "                  -mask_epi_anat yes                            \\", "                  -combine_method tedana                        \\", "                  -blur_in_mask yes                             \\", "                  -regress_motion_per_run                       \\", "                  -regress_censor_motion 0.2                    \\", "                  -regress_censor_outliers 0.1                  \\", "                  -regress_apply_mot_types demean deriv         \\", "                  -regress_est_blur_epits", "", "         Consider an alternative combine method, 'tedana_OC_tedort'.", "", "    --------------------------------------------------", "    -ask_me EXAMPLES:  ** NOTE: -ask_me is antiquated ** ~2~", "", "        a1. Apply -ask_me in the most basic form, with no other options.", "", "                afni_proc.py -ask_me", "", "        a2. Supply input datasets.", "", "                afni_proc.py -ask_me -dsets ED/ED_r*.HEAD", "", "        a3. Same as a2, but supply the datasets in expanded form.", "            No suffix (.HEAD) is needed when wildcards are not used.", "", "                afni_proc.py -ask_me                          \\", "                     -dsets ED/ED_r01+orig ED/ED_r02+orig     \\", "                            ED/ED_r03+orig ED/ED_r04+orig     \\", "                            ED/ED_r05+orig ED/ED_r06+orig     \\", "                            ED/ED_r07+orig ED/ED_r08+orig     \\", "                            ED/ED_r09+orig ED/ED_r10+orig", "", "        a4. Supply datasets, stim_times files and labels.", "", "                afni_proc.py -ask_me                                    \\", "                        -dsets ED/ED_r*.HEAD                            \\", "                        -regress_stim_times misc_files/stim_times.*.1D  \\", "                        -regress_stim_labels ToolMovie HumanMovie       \\", "                                             ToolPoint HumanPoint", "", "", "", "    ==================================================", "    Many NOTE sections: ~1~", "    ==================================================", "", "    --------------------------------------------------", "    GENERAL ANALYSIS NOTE: ~2~", "", "    How might one run a full analysis?  Here are some de"], "params": [{"param_range": [1000, 1014], "help_range": [984, 2113]}, {"param_range": [2132, 2138], "help_range": [2114, 3309]}, {"param_range": [3328, 3334], "help_range": [2114, 2179]}, {"param_range": [3394, 3396], "help_range": [3376, 3573]}, {"param_range": [3592, 3607], "help_range": [3574, 3969]}, {"param_range": [3988, 4002], "help_range": [3970, 4299]}, {"param_range": [4318, 4342], "help_range": [4300, 5066]}, {"param_range": [5085, 5091], "help_range": [2114, 2179]}, {"param_range": [5151, 5153], "help_range": [3376, 3573]}, {"param_range": [5349, 5364], "help_range": [3574, 3969]}, {"param_range": [5745, 5759], "help_range": [5727, 5858]}, {"param_range": [5877, 5890], "help_range": [5859, 6122]}, {"param_range": [6141, 6165], "help_range": [6123, 6356]}, {"param_range": [6361, 6368], "help_range": [6379, 6825]}], "previous": "afni_proc.py_part8.json", "next": "afni_proc.py_part10.json"}