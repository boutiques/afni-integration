{
 "helptext": [
  "3dGenPriors produces classification priors based on voxel signatures.",
  "At this stage, its main purpose is to speed up the performance of",
  "3dSignatures when using the probablilistic method as opposed to SVM.",
  "",
  "Example:",
  "3dGenPriors      -sig sigs+orig \\",
  "                 -tdist train.niml.td \\",
  "                 -pprefix anat.p \\",
  "                 -cprefix anat.c   \\",
  "                 -labeltable DSC.niml.lt \\",
  "                 -do pc   ",
  "",
  "Options:",
  "   -sig SIGS: Signatures dataset. A dataset with F features per voxel.",
  "   -tdist TDIST: Training results. This file is generated by 3dSignatures.",
  "                 ONLY training files generated by 3dSignatures' method 'prob'",
  "                 can be used by this program. The number of features in this",
  "                 file should match the number of features (F) in SIGS",
  "                 This file also contains the names of the K classes that",
  "                 will be references in the output datasets",
  "",
  "   -prefix PREF: Specify root prefix and let program suffix it for output ",
  "                 Volumes. This way you need not use the -*prefix options",
  "                 below.",
  "   -pprefix PPREF: Prefix for probability dset",
  "   -cprefix CPREF: Prefix for class dset",
  "   If you use -regroup_classes then you can also specify:",
  "     -pgprefix PGPREF, and -cgprefix CGPREF",
  "   -labeltable LTFILE: Labeltable to attach to output dset",
  "                       This labeltable should contain all the classes",
  "                       in TDIST",
  "   -cmask CMASK: Provide cmask expression. Voxels where expression is 0",
  "                 are excluded from computations",
  "   -mask MASK: Provide mask dset",
  "               To run the program on one voxel only, you can set MASK to ",
  "               the key word VOX_DEBUG. In this mode a mask is created",
  "               with only the one voxel specified in -vox_debug set to 1.",
  "   -mrange M0 M1: Consider MASK only for values between M0 and M1, inclusive",
  "   -do WHAT: Specify the output that this program should create.",
  "             Each character in WHAT specifies an output. ",
  "             a 'c' produces the most likely class",
  "             a 'p' produces probability of belonging to a class",
  "             a 'pc' produces both of the above and that is the default.",
  "                  You'd be deranged to use anything else at the moment.",
  "   -debug DBG: Set debug level",
  "   -vox_debug 1D_DBG_INDEX: 1D index of voxel to debug.",
  "       OR",
  "   -vox_debug I J K: where I, J, K are the 3D voxel indices ",
  "                     (not RAI coordinates in mm)",
  "   -vox_debug_file DBG_OUTPUT_FILE: File in which debug information is output",
  "                                    use '-' for stdout, '+' for stderr.",
  "   -uid UID : User identifier string. It is used to generate names for",
  "              temporary files to speed up the process. ",
  "              You must use different UID for different subjects otherwise",
  "              you will run the risk of using bad temporary files.",
  "              By default, uid is set to a random string.",
  "   -use_tmp: Use temporary storage to speed up the program (see -uid )",
  "             This is the default",
  "   -no_tmp: Opposite of use_tmp",
  "   -pset PSET: Reuse probability output from an earlier run.",
  "   -cset CSET: Reuse classification output from an earlier run.",
  "   -regroup_classes 'C1 C2 C3': Regroup classes into parent classes C1 C2 C3",
  "                                For this to work, the original classes must ",
  "                                be named something like C1.*, C2.*, etc.",
  "        This option can be used to replace @RegroupLabels script.",
  "        For example:",
  "        3dGenPriors      -sig sigs+orig \\",
  "                         -tdist train.niml.td \\",
  "                         -pprefix anat.p \\",
  "                         -cprefix anat.c   \\",
  "                         -labeltable DSC.niml.lt \\",
  "                         -do pc   \\",
  "                         -regroup_classes  'CSF GM WM Out'",
  "",
  "    or if you have the output already, you can do:",
  "",
  "       3dGenPriors      -sig sigs+orig \\",
  "                         -tdist train.niml.td \\",
  "                         -pset anat.p \\",
  "                         -cset anat.c   \\",
  "                         -labeltable DSC.niml.lt \\",
  "                         -do pc   \\",
  "                         -regroup_classes  'CSF GM WM Out'",
  "  -classes 'C1 C2 C3': Classify into these classes only. Alternative is",
  "                       to classify from all the classes in the training data",
  "  -features 'F1 F2 F3 ...': Use these features only. Otherwise use all ",
  "                            features in the signature file will be used.",
  "                            Note that partial matching is used to resolve",
  "                            which features to keep from training set. If you",
  "                            want exact feature name matching, use",
  "                            option -strict_feature_match",
  "  -strict_feature_match: Use strict feature name matching when resolving ",
  "                         which feature to keep from the traning set.",
  "  -featgroups 'G1 G2 G3 ...': TO BE WRITTEN",
  "                            Example: -featgroups 'MEDI MAD. P2S'",
  "  -ShowThisDist DIST: Show information obtained from the training data about",
  "                      the distribution of DIST. For example: -",
  "                       -ShowThisDist 'd(mean.20_mm|PER02)'",
  "                      Set DIST to ALL to see them all.",
  "  -fast: Use OpenMPized routines (default). ",
  "         Considerably faster than alternative.",
  "  -slow: Not -fast.",
  "",
  "",
  " =========================================================================",
  "* This binary version of 3dGenPriors is NOT compiled using OpenMP, a",
  "   semi-automatic parallelizer software toolkit, which splits the work",
  "   across multiple CPUs/cores on the same shared memory computer.",
  "* However, the source code is modified for OpenMP, and can be compiled",
  "   with an OpenMP-capable compiler, such as gcc 4.2+, Intel's icc, and",
  "   Sun Studio.",
  "* If you wish to compile this program with OpenMP, see the man page for",
  "   your C compiler, and (if needed) consult the AFNI message board, and",
  "   https://afni.nimh.nih.gov/pub/dist/doc/misc/OpenMP.html"
 ],
 "params": [
  {
   "param_range": [
    444,
    448
   ],
   "help_range": [
    455,
    511
   ]
  },
  {
   "param_range": [
    515,
    521
   ],
   "help_range": [
    529,
    943
   ]
  },
  {
   "param_range": [
    948,
    955
   ],
   "help_range": [
    962,
    1116
   ]
  },
  {
   "param_range": [
    1120,
    1128
   ],
   "help_range": [
    1136,
    1163
   ]
  },
  {
   "param_range": [
    1167,
    1175
   ],
   "help_range": [
    1183,
    1306
   ]
  },
  {
   "param_range": [
    1310,
    1321
   ],
   "help_range": [
    1330,
    1467
   ]
  },
  {
   "param_range": [
    1471,
    1477
   ],
   "help_range": [
    1485,
    1587
   ]
  },
  {
   "param_range": [
    1591,
    1596
   ],
   "help_range": [
    1603,
    1837
   ]
  },
  {
   "param_range": [
    1841,
    1848
   ],
   "help_range": [
    1856,
    1914
   ]
  },
  {
   "param_range": [
    1918,
    1921
   ],
   "help_range": [
    1928,
    2295
   ]
  },
  {
   "param_range": [
    2299,
    2305
   ],
   "help_range": [
    2311,
    2326
   ]
  },
  {
   "param_range": [
    2330,
    2340
   ],
   "help_range": [
    2355,
    2392
   ]
  },
  {
   "param_range": [
    2396,
    2406
   ],
   "help_range": [
    2414,
    2502
   ]
  },
  {
   "param_range": [
    2506,
    2521
   ],
   "help_range": [
    2539,
    2652
   ]
  },
  {
   "param_range": [
    2656,
    2660
   ],
   "help_range": [
    2667,
    2976
   ]
  },
  {
   "param_range": [
    2980,
    2988
   ],
   "help_range": [
    2990,
    3080
   ]
  },
  {
   "param_range": [
    3084,
    3091
   ],
   "help_range": [
    3093,
    3112
   ]
  },
  {
   "param_range": [
    3116,
    3121
   ],
   "help_range": [
    3128,
    3173
   ]
  },
  {
   "param_range": [
    3177,
    3182
   ],
   "help_range": [
    3189,
    3237
   ]
  },
  {
   "param_range": [
    3241,
    3257
   ],
   "help_range": [
    3257,
    3816
   ]
  },
  {
   "param_range": [
    3842,
    3858
   ],
   "help_range": [
    3858,
    4186
   ]
  },
  {
   "param_range": [
    4212,
    4228
   ],
   "help_range": [
    3858,
    3875
   ]
  },
  {
   "param_range": [
    4248,
    4256
   ],
   "help_range": [
    4256,
    4394
   ]
  },
  {
   "param_range": [
    4397,
    4406
   ],
   "help_range": [
    4406,
    4813
   ]
  },
  {
   "param_range": [
    4816,
    4837
   ],
   "help_range": [
    4839,
    4956
   ]
  },
  {
   "param_range": [
    4959,
    4970
   ],
   "help_range": [
    4970,
    5065
   ]
  },
  {
   "param_range": [
    5068,
    5081
   ],
   "help_range": [
    5088,
    5319
   ]
  },
  {
   "param_range": [
    5322,
    5327
   ],
   "help_range": [
    5329,
    5411
   ]
  },
  {
   "param_range": [
    5414,
    5419
   ],
   "help_range": [
    5421,
    6074
   ]
  }
 ]
}